buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'

// External properties
ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.version}.${config.build_number}"
ext.full_version = "${config.mc_version}-${project.version}"
group = 'pkanti.healthscoring' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'healthscoring'

ext.tempBuildDir = 'build/sources/java'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: config.mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    mavenCentral()
    maven { // Mantle
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"

    compile fg.deobf("slimeknights.mantle:Mantle:${config.mc_version_mantle}-${config.mantle_version}")
}

processResources {
    from (sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.version, 'mantleversion': config.mantle_version
    }

    from (sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}
"""
jar {
    manifest {
        attributes([
            "FMLAT": "accesstransformer.cfg",
        ])
    }
}
"""

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

task incrementBuildNumber {
    doFirst {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

defaultTasks 'clean', 'build', 'incrementBuildNumber'